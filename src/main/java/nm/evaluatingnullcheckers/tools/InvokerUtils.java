package nm.evaluatingnullcheckers.tools;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Class containing several utility methods / classes for the invoker
 * 
 * @author Nick Mazey
 *
 */
public class InvokerUtils {

	public enum CheckerOutput {
		VULNERABLE, SAFE, ERROR;
	}

	public enum KnownChecker {
		CHECKERFRAMEWORK, INFER, NULLAWAY;
	}

	public enum Flag {
		TRUEPOSITIVE, FALSEPOSITIVE, TRUENEGATIVE, FALSENEGATIVE, ERROR;
	}

	/**
	 * Converts processed outputs into a JSON file
	 * 
	 * @param outputs - Outputs generated by parseReports
	 * @param file    - The file for writing output to
	 */
	public static void outputReportsToFile(HashMap<KnownChecker, ArrayList<CheckerReport>> outputs, File file) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			String output = mapper.writeValueAsString(outputs);
			FileWriter writer = new FileWriter(file);
			writer.write(output);
			writer.close();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Method for deserialising reports from the checker output parser
	 * 
	 * @param file - The file to deserialise
	 * @return - The report de-serialised
	 */
	public static HashMap<KnownChecker, ArrayList<CheckerReport>> deserialiseReports(File file) {
		ObjectMapper mapper = new ObjectMapper();
		TypeReference<HashMap<KnownChecker, ArrayList<CheckerReport>>> outputRef = new TypeReference<HashMap<KnownChecker, ArrayList<CheckerReport>>>() {
		};
		try {
			HashMap<KnownChecker, ArrayList<CheckerReport>> output = mapper.readValue(file, outputRef);
			return output;
		} catch (JsonParseException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new HashMap<KnownChecker, ArrayList<CheckerReport>>();
	}

	/**
	 * Writes results to a file in JSON format
	 * 
	 * @param results - Results map to write
	 * @param file    - File for writing
	 */
	public static void outputResultsToFile(HashMap<KnownChecker, CheckerResult> results, File file) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			String output = mapper.writeValueAsString(results);
			FileWriter writer = new FileWriter(file);
			writer.write(output);
			writer.close();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Method for de-serialising results from checker evaluator
	 * 
	 * @param file - JSON file to read from
	 * @return - The results de-serialised
	 */
	public static HashMap<KnownChecker, CheckerResult> deserialiseResults(File file) {
		ObjectMapper mapper = new ObjectMapper();
		TypeReference<HashMap<KnownChecker, CheckerResult>> outputRef = new TypeReference<HashMap<KnownChecker, CheckerResult>>() {
		};
		try {
			HashMap<KnownChecker, CheckerResult> output = mapper.readValue(file, outputRef);
			return output;
		} catch (JsonParseException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new HashMap<KnownChecker, CheckerResult>();
	}

}
